name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: kubeguard
          POSTGRES_PASSWORD: kubeguard123
          POSTGRES_DB: kubeguard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: mvn clean test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/kubeguard_test
          SPRING_DATASOURCE_USERNAME: kubeguard
          SPRING_DATASOURCE_PASSWORD: kubeguard123

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=7 \
            -DskipTestScope=true

      - name: Upload OWASP report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-report
          path: target/dependency-check-report.html

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    name: Build

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.build.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to staging
        run: |
          # Update image in deployment
          sed -i "s|kubeguard:.*|${{ needs.build.outputs.image-uri }}|g" k8s/deployment.yaml
          
          # Apply manifests
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/rbac.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secret.yaml
          kubectl apply -f k8s/postgres.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          
          # Wait for deployment
          kubectl rollout status deployment/kubeguard -n kubeguard --timeout=600s

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=kubeguard -n kubeguard --timeout=300s
          
          # Port forward for testing
          kubectl port-forward svc/kubeguard 8080:80 -n kubeguard &
          sleep 10
          
          # Health check
          curl -f http://localhost:8080/actuator/health || exit 1
          
          # API test
          curl -f http://localhost:8080/api-docs || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to Production
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}

      - name: Deploy to production
        run: |
          # Update image in deployment
          sed -i "s|kubeguard:.*|${{ needs.build.outputs.image-uri }}|g" k8s/deployment.yaml
          
          # Apply manifests with production settings
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/rbac.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secret.yaml
          kubectl apply -f k8s/postgres.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl apply -f k8s/hpa.yaml
          kubectl apply -f k8s/poddisruptionbudget.yaml
          kubectl apply -f k8s/networkpolicy.yaml
          
          # Wait for deployment
          kubectl rollout status deployment/kubeguard -n kubeguard --timeout=600s

      - name: Run production tests
        run: |
          # Wait for service to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=kubeguard -n kubeguard --timeout=300s
          
          # Health check via ingress
          curl -f https://kubeguard.yourdomain.com/actuator/health || exit 1

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    name: Notify
    if: always()

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#kubeguard-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
